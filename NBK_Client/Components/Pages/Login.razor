@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using NBK_Client.Models
@using NBK_Client.Models.Requests
@using NBK_Client.Models.Responses

@page "/Login"
<PageTitle>Login</PageTitle>
<div style="height: 100vh;">
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardHeader>
                <MudText >Login</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField Label="Email" @bind-Value="model.Email" Required />
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                              @bind-Value="model.Password" InputType="InputType.Password" Required />
                @if (IsShown)
                {
                    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center"
                              ShowCloseIcon="true" CloseIconClicked="CloseMe">
                        Username or password are incorrect!
                    </MudAlert>
                }
            </MudCardContent>
            <MudCardActions>
                <MudText>Don't have an account?</MudText>
                <MudLink Href="/register" Underline="Underline.Always" Style="margin-left: 5px;">Register</MudLink>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                           Class="ml-auto">Login</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {
    [CascadingParameter] public GlobalAppState State { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }

    bool IsShown = false;
    LoginRequest model = new LoginRequest();

    public void CloseMe()
    {
        IsShown = false;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            var http = State.CreateClient();
            var response = await http.PostAsJsonAsync("/Authentication/login", model);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                State.SaveToken(result);
                Console.WriteLine(result);
                StateHasChanged();
                NavigationManager.NavigateTo("/");
            }
            else
            {
                IsShown = true;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine(ex);
        }
    }
}
